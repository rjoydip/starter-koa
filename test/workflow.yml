version: '1.1'
name: API Testing

env:
  host: 127.0.0.1
  port: 3000
  prefix: api

tests:
  welcome:
    steps:
      - name: Welcome
        http:
          url: http://${{env.host}}:${{env.port}}/
          method: GET
          check:
            status: 200
            headers:
              Content-Type: application/json; charset=utf-8

  status:
    steps:
      - name: Status
        http:
          url: http://${{env.host}}:${{env.port}}/status
          method: GET
          check:
            status: 200
            headers:
              Content-Type: application/json; charset=utf-8

  health:
    steps:
      - name: Health
        http:
          url: http://${{env.host}}:${{env.port}}/health
          method: GET
          check:
            status: 200
            headers:
              Content-Type: application/json; charset=utf-8

  _metrics:
    steps:
      - name: Metrics
        http:
          url: http://${{env.host}}:${{env.port}}/_metrics
          method: GET
          check:
            status: 200
            headers:
              Content-Type: application/json; charset=utf-8

  _meta:
    steps:
      - name: Meta
        http:
          url: http://${{env.host}}:${{env.port}}/_meta
          method: GET
          check:
            status: 200
            headers:
              Content-Type: application/json; charset=utf-8

  openapi:
    steps:
      - name: OpenAPI
        http:
          url: http://${{env.host}}:${{env.port}}/openapi
          method: GET
          check:
            status: 200
            headers:
              Content-Type: application/json; charset=utf-8

  references:
    steps:
      - name: API Docs
        http:
          url: http://${{env.host}}:${{env.port}}/references
          method: GET
          check:
            status: 200

  graphql:
    steps:
      - name: GraphQL Playground
        http:
          url: http://${{env.host}}:${{env.port}}/graphql
          method: GET
          check:
            status: 200

  _ws:
    steps:
      - name: WS Playground
        http:
          url: http://${{env.host}}:${{env.port}}/_ws
          method: GET
          check:
            status: 200

  /api/user{*}:
    steps:
      - name: GetUsers
        http:
          url: http://${{env.host}}:${{env.port}}/${{env.prefix}}/users
          method: GET
          headers:
            Content-Type: application/json
          check:
            status: 200
            headers:
              Content-Type: application/json; charset=utf-8

      - name: PostUser
        http:
          url: http://${{env.host}}:${{env.port}}/${{env.prefix}}/user
          method: POST
          headers:
            Content-Type: application/json
          json:
            name: testusername
            email: test.email@example.com
            phone: '+1234567890'
            isVerified: true
            password: testpassword
            address: testaddress
            role: user
          captures:
            id:
              jsonpath: $.id
          check:
            status: 200
            headers:
              Content-Type: application/json; charset=utf-8

      - name: GetUser
      - delay: 5s
        http:
          url: http://${{env.host}}:${{env.port}}/${{env.prefix}}/user/${{captures.id}}
          method: GET
          headers:
            Content-Type: application/json
          check:
            status: 200
            headers:
              Content-Type: application/json; charset=utf-8

      - name: DeleteUser
        http:
          url: http://${{env.host}}:${{env.port}}/${{env.prefix}}/user/${{captures.id}}
          method: DELETE
          headers:
            Content-Type: application/json
          check:
            status: 200
            headers:
              Content-Type: application/json; charset=utf-8
