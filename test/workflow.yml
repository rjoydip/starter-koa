version: '1.1'
name: API Testing

env:
  host: 127.0.0.1
  port: 3000
  graphql_port: 3001
  prefix: api
  protocal: http

components:
  input_data:
    name: ${{ person.fullName | fake}}
    email: ${{ internet.email | fake}}
    phone: ${{ phone.number | fake}}
    isVerified: ${{ datatype.boolean | fake }}
    password: ${{ internet.password | fake }}
    address: ${{ location.city | fake }}
    role: user

tests:
  /{*}:
    steps:
      - name: welcome
        http:
          url: ${{env.protocal}}://${{env.host}}:${{env.port}}/
          method: GET
          check:
            status: 200
            headers:
              Content-Type: application/json; charset=utf-8

      - name: status
        http:
          url: ${{env.protocal}}://${{env.host}}:${{env.port}}/status
          method: GET
          check:
            status: 200
            headers:
              Content-Type: application/json; charset=utf-8

      - name: health
        http:
          url: ${{env.protocal}}://${{env.host}}:${{env.port}}/health
          method: GET
          check:
            status: 200
            headers:
              Content-Type: application/json; charset=utf-8

      - name: metrics
        http:
          url: ${{env.protocal}}://${{env.host}}:${{env.port}}/_metrics
          method: GET
          check:
            status: 200
            headers:
              Content-Type: application/json; charset=utf-8

      - name: meta
        http:
          url: ${{env.protocal}}://${{env.host}}:${{env.port}}/_meta
          method: GET
          check:
            status: 200
            headers:
              Content-Type: application/json; charset=utf-8

      - name: openapi_data
        http:
          url: ${{env.protocal}}://${{env.host}}:${{env.port}}/openapi.json
          method: GET
          check:
            status: 200
            headers:
              Content-Type: application/json; charset=utf-8

      - name: references
        http:
          url: ${{env.protocal}}://${{env.host}}:${{env.port}}/references
          method: GET
          check:
            status: 200

  /api/graphql{*}:
    steps:
      - name: graphql
        http:
          url: ${{env.protocal}}://${{env.host}}:${{env.graphql_port}}/${{env.prefix}}/graphql
          method: GET
          check:
            status: 200

      - name: graphql_create_user
        http:
          url: ${{env.protocal}}://${{env.host}}:${{env.graphql_port}}/${{env.prefix}}/graphql
          graphql:
            query: |
              mutation CreateUser($input: UserInput!) {
                createUser(input: $input) {
                  id
                  name
                  email
                  phone
                  address
                  role
                  is_verified
                  created_at
                  updated_at
                }
              }
            variables:
              input:
                $ref: '#/components/input_data'
          captures:
            id:
              jsonpath: $.data.createUser.id
          check:
            status: 200

      - name: graphql_update_user
        if: captures.id
        http:
          url: ${{env.protocal}}://${{env.host}}:${{env.graphql_port}}/${{env.prefix}}/graphql
          graphql:
            query: |
              mutation UpdateUser($id: ID!, $input: UserInput!) {
                updateUser(id: $id, input: $input) {
                  id
                  name
                  email
                  phone
                  address
                  role
                  is_verified
                  created_at
                  updated_at
                }
              }
            variables:
              id: ${{captures.id}}
              input:
                $ref: '#/components/input_data'
          check:
            status: 200
            jsonpath:
              $.data.updateUser.id: ${{captures.id}}

      - name: graphql_get_user
        if: captures.id
        http:
          url: ${{env.protocal}}://${{env.host}}:${{env.graphql_port}}/${{env.prefix}}/graphql
          graphql:
            query: |
              query GetUser($id: ID!) {
                getUser(id: $id) {
                  id
                  name
                  email
                  phone
                  address
                  role
                  is_verified
                  created_at
                  updated_at
                }
              }
            variables:
              id: ${{captures.id}}
          check:
            status: 200
            jsonpath:
              $.data.getUser.id: ${{captures.id}}

      - name: graphql_get_users
        if: captures.id
        http:
          url: ${{env.protocal}}://${{env.host}}:${{env.graphql_port}}/${{env.prefix}}/graphql
          graphql:
            query: |
              query {
                getUsers {
                  id
                  name
                  email
                  phone
                  address
                  role
                  is_verified
                  created_at
                  updated_at
                }
              }
          check:
            status: 200
            # jsonpath:
            #   $.data.getUsers[0].id: ${{captures.id}}

      - name: graphql_delete_user
        if: captures.id
        http:
          url: ${{env.protocal}}://${{env.host}}:${{env.graphql_port}}/${{env.prefix}}/graphql
          graphql:
            query: |
              mutation DeleteUser($id: ID!) {
                deleteUser(id: $id) {
                  id
                  name
                  email
                  phone
                  address
                  role
                  is_verified
                  created_at
                  updated_at
                }
              }
            variables:
              id: ${{captures.id}}
          check:
            status: 200
            jsonpath:
              $.data.deleteUser.id: ${{captures.id}}

      - name: ws_playground
        http:
          url: ${{env.protocal}}://${{env.host}}:${{env.port}}/_ws
          method: GET
          check:
            status: 200

  /api/trpc{*}:
    steps:
      - name: trpc_ping
        http:
          url: ${{env.protocal}}://${{env.host}}:${{env.port}}/${{env.prefix}}/trpc
          trpc:
            query:
              ping:
          check:
            status: /^200/
            jsonpath:
              $.result.data: Pong

      - name: trpc_create_user
        http:
          url: ${{env.protocal}}://${{env.host}}:${{env.port}}/${{env.prefix}}/trpc
          trpc:
            mutation:
              createUser:
                $ref: '#/components/input_data'
          captures:
            id:
              jsonpath: $.result.data.id
          check:
            status: /^200/

      - name: trpc_update_user
        if: captures.id
        http:
          url: ${{env.protocal}}://${{env.host}}:${{env.port}}/${{env.prefix}}/trpc
          trpc:
            mutation:
              updateUser:
                id: ${{captures.id}}
                payload:
                  $ref: '#/components/input_data'
          check:
            status: /^200/
            jsonpath:
              $.result.data.id: ${{captures.id}}

      - name: trpc_get_user
        if: captures.id
        http:
          url: ${{env.protocal}}://${{env.host}}:${{env.port}}/${{env.prefix}}/trpc
          trpc:
            query:
              getUser: ${{captures.id}}
          check:
            status: /^200/
            jsonpath:
              $.result.data.id: ${{captures.id}}

      - name: trpc_get_users
        if: captures.id
        http:
          url: ${{env.protocal}}://${{env.host}}:${{env.port}}/${{env.prefix}}/trpc
          trpc:
            query:
              getUsers:
          check:
            status: /^200/

      - name: trpc_delete_user
        if: captures.id
        http:
          url: ${{env.protocal}}://${{env.host}}:${{env.port}}/${{env.prefix}}/trpc
          trpc:
            mutation:
              deleteUser: ${{captures.id}}
          check:
            status: /^200/
            jsonpath:
              $.result.data.id: ${{captures.id}}

  /api/user{*}:
    steps:
      - name: get_users
        http:
          url: ${{env.protocal}}://${{env.host}}:${{env.port}}/${{env.prefix}}/users
          method: GET
          headers:
            Content-Type: application/json
          check:
            status: 200
            headers:
              Content-Type: application/json; charset=utf-8

      - name: post_user
        http:
          url: ${{env.protocal}}://${{env.host}}:${{env.port}}/${{env.prefix}}/user
          method: POST
          headers:
            Content-Type: application/json
          json:
            $ref: '#/components/input_data'
          captures:
            id:
              jsonpath: $.data.id
          check:
            status: 200
            headers:
              Content-Type: application/json; charset=utf-8
            jsonpath:
              $.result.data.id: ${{captures.id}}

      - name: get_user
        if: captures.id
        http:
          url: ${{env.protocal}}://${{env.host}}:${{env.port}}/${{env.prefix}}/user/${{captures.id}}
          method: GET
          headers:
            Content-Type: application/json
          check:
            status: 200
            headers:
              Content-Type: application/json; charset=utf-8
            jsonpath:
              $.data.id: ${{captures.id}}

      - name: update_user_details
        if: captures.id
        http:
          url: ${{env.protocal}}://${{env.host}}:${{env.port}}/${{env.prefix}}/user/${{captures.id}}
          method: PUT
          json:
            $ref: '#/components/input_data'
          headers:
            Content-Type: application/json
          check:
            status: 200
            headers:
              Content-Type: application/json; charset=utf-8
            jsonpath:
              $.data.id: ${{captures.id}}

      - name: update_user
        if: captures.id
        http:
          url: ${{env.protocal}}://${{env.host}}:${{env.port}}/${{env.prefix}}/user/${{captures.id}}
          method: PATCH
          json:
            $ref: '#/components/input_data'
          headers:
            Content-Type: application/json
          check:
            status: 200
            headers:
              Content-Type: application/json; charset=utf-8
            jsonpath:
              $.data.id: ${{captures.id}}

      - name: delete_user
        if: captures.id
        http:
          url: ${{env.protocal}}://${{env.host}}:${{env.port}}/${{env.prefix}}/user/${{captures.id}}
          method: DELETE
          headers:
            Content-Type: application/json
          check:
            status: 200
            headers:
              Content-Type: application/json; charset=utf-8
            jsonpath:
              $.data.id: ${{captures.id}}
